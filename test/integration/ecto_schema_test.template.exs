defmodule MnemeIntegration.EctoSchemaTest do
  use ExUnit.Case
  use Mneme

  defmodule User do
    use Ecto.Schema

    schema "users" do
      field(:email, :string)
      timestamps()
    end
  end

  defmodule Post do
    use Ecto.Schema

    schema "posts" do
      field(:title, :string)
      belongs_to(:user, User)
      timestamps()
    end
  end

  test "should exclude autogenerated fields" do
    auto_assert create(User, email: "user@example.org")
  end

  test "should exclude non-loaded associations" do
    auto_assert create(Post, title: "my post")
  end

  test "should exclude association keys" do
    {:ok, user} = create(User, email: "user@example.org")
    auto_assert create(Post, user_id: user.id)
  end

  test "should include loaded associations" do
    {:ok, user} = create(User, email: "user@example.org")
    auto_assert create(Post, user_id: user.id, user: user)
  end

  # TODO: Set up a Repo to ensure these fields are being properly set.
  defp create(schema, attrs) do
    now = NaiveDateTime.utc_now()

    attrs =
      Enum.into(attrs, %{
        id: System.monotonic_time() |> abs(),
        inserted_at: now,
        updated_at: now
      })

    user =
      schema
      |> struct(attrs)
      |> Map.update!(:__meta__, &Map.put(&1, :state, :loaded))

    {:ok, user}
  end
end
