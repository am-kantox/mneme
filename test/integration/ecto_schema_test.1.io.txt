# exit:0

New â€¢ auto_assert

...

     test "should exclude autogenerated fields" do
 -     auto_assert create(User, email: "user@example.org")
 +     auto_assert {:ok, %User{email: "user@example.org"}} <- create(User, email: "user@example.org")
     end

...

ðŸ›ˆ Notes about this assertion:
  * Patterns for Ecto structs exclude primary keys, association keys, and meta fields

Accept new assertion? [yN]: !{y
}
New â€¢ auto_assert

...

     test "should exclude non-loaded associations" do
 -     auto_assert create(Post, title: "my post")
 +     auto_assert {:ok, %Post{title: "my post"}} <- create(Post, title: "my post")
     end

...

ðŸ›ˆ Notes about this assertion:
  * Patterns for Ecto structs exclude primary keys, association keys, and meta fields

Accept new assertion? [yN]: !{y
}
New â€¢ auto_assert

...
     test "should exclude association keys" do
       {:ok, user} = create(User, email: "user@example.org")
 -     auto_assert create(Post, user_id: user.id)
 +     auto_assert {:ok, %Post{}} <- create(Post, user_id: user.id)
     end

...

ðŸ›ˆ Notes about this assertion:
  * Patterns for Ecto structs exclude primary keys, association keys, and meta fields

Accept new assertion? [yN]: !{y
}
New â€¢ auto_assert

...
     test "should include loaded associations" do
       {:ok, user} = create(User, email: "user@example.org")
 -     auto_assert create(Post, user_id: user.id, user: user)
 +     auto_assert {:ok, %Post{user: ^user}} <- create(Post, user_id: user.id, user: user)
     end

...

ðŸ›ˆ Notes about this assertion:
  * Patterns for Ecto structs exclude primary keys, association keys, and meta fields

Accept new assertion? [yN]: !{y
}....
4 tests, 0 failures
